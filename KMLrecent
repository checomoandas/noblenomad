<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Google Map</title>
    <style>
        #map { height: 480px; width: 640px; float: left; }
        #directionsPanel {
            width: 200px;
            height: 480px;
            float: right;
            padding: 10px;
            background-color: white;
            overflow: auto;
            display: none;
        }
        .small-font { font-size: 0.8em; }
        .extra-small-font { font-size: 0.7em; }
        button {
            background-color: #FFF;
            color: black;
            font-family: 'Gill Sans MT', sans-serif;
            margin: 2px;
        }
        button.active {
            background-color: #000000;
            color: white;
        }
        .button-container {
            margin-top: 10px;
        }
    </style>
</head>
<body>
<div id="map"></div>
<div id="directionsPanel">
    <b>Start:</b>
    <input type="text" id="startLocation" placeholder="Enter start location">
    <b>End: <span id="endLocationName" class="small-font"></span><a href="#" onclick="copyAddress()" class="extra-small-font">Copy Address</a></b>
    <input type="text" id="endLocation" readonly>
    <b>Mode of Travel:</b>
    <select id="travelMode">
        <option value="DRIVING">Driving</option>
        <option value="WALKING">Walking</option>
        <option value="BICYCLING">Bicycling</option>
        <option value="TRANSIT">Transit</option>
    </select>
    <button onclick="calculateAndDisplayRoute()">Get Directions</button>
    <div id="routeDetails"></div>
</div>
<div class="button-container">
    <button data-category="complex" data-values="social">MEETUP</button>
    <button data-category="category2" data-value="mon">MON</button>
    <button data-category="category2" data-value="tue">TUE</button>
    <button data-category="category2" data-value="wed">WED</button>
    <button data-category="category2" data-value="thu">THU</button>
    <button data-category="category2" data-value="fri">FRI</button>
    <button data-category="category2" data-value="sat">SAT</button>
    <button data-category="category2" data-value="sun">SUN</button><br>
    <button data-category="category" data-value="gym">GYM</button>
    <button data-category="category" data-value="value3">CO-WORK</button>
    <button data-category="category" data-values="healthy">HEALTHY FOOD</button>
    <button id="kml1Button" onclick="toggleKMLLayer(0)">Tier1</button>
    <button id="kml2Button" onclick="toggleKMLLayer(1)">Tier2</button>
    <button id="kml3Button" onclick="toggleKMLLayer(2)">Tier3</button>
</div>

<script>
let map, directionsService, directionsRenderer, markers = [], activeFilters = { category: [], category2: [], category3: [], complex: [] }, currentInfowindow;
let kmlLayers = [null, null, null], kmlUrls = ['https://raw.githubusercontent.com/checomoandas/noblenomad/main/Safest%20and%20most%20walkable.kml', 'https://raw.githubusercontent.com/checomoandas/noblenomad/main/Safe%20but%20less%20walkable.kml', 'https://raw.githubusercontent.com/checomoandas/noblenomad/main/Feels%20sketchy%20at%20night.kml'];

function initMap() {
    map = new google.maps.Map(document.getElementById('map'), { center: { lat: -34.58, lng: -58.42 }, zoom: 13, mapTypeControl: false });
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);
    new google.maps.places.Autocomplete(document.getElementById('startLocation'));
    fetch('https://raw.githubusercontent.com/checomoandas/noblenomad/main/BsAsPins.csv').then(response => response.text()).then(csvData => {
        csvData.split('\n').slice(1).forEach(line => {
            const columns = line.split(',');
            let data = { name: columns[0], lat: parseFloat(columns[1]), lng: parseFloat(columns[2]), popup_header: columns[3], popupimage_url: columns[4], description: columns[5], icon_url: columns[6], category: columns[7], category2: columns[8], category3: columns[9] };
            if (!isNaN(data.lat) && !isNaN(data.lng)) {
                createMarker(data);
            }
        });
    }).catch(error => console.error('Error fetching or parsing CSV data:', error));
    document.querySelectorAll('button[data-category]').forEach(button => {
        button.addEventListener('click', function () {
            let categoryType = this.getAttribute('data-category');
            let categoryValues = this.hasAttribute('data-value') ? [this.getAttribute('data-value')] : this.hasAttribute('data-values') ? this.getAttribute('data-values').split(',') : [];
            this.classList.toggle('active');
            if (categoryType === 'complex') {
                activeFilters.complex = this.classList.contains('active') ? categoryValues : [];
            } else {
                categoryValues.forEach(value => {
                    let index = activeFilters[categoryType].indexOf(value);
                    if (index > -1) activeFilters[categoryType].splice(index, 1);
                    else activeFilters[categoryType].push(value);
                });
            }
            applyFilters();
        });
    });
}

function initKMLLayers() {
    kmlUrls.forEach((url, index) => {
        kmlLayers[index] = new google.maps.KmlLayer({
            url: url,
            map: null
        });
    });
}

function toggleKMLLayer(index) {
    if (kmlLayers[index] && kmlLayers[index].setMap) {
        if (kmlLayers[index].getMap()) {
            kmlLayers[index].setMap(null);
            document.getElementById(`kml${index + 1}Button`).classList.remove('active');
        } else {
            kmlLayers[index].setMap(map);
            document.getElementById(`kml${index + 1}Button`).classList.add('active');
        }
    }
}

function createMarker(data) {
    let markerOptions = {
        position: { lat: data.lat, lng: data.lng },
        map: map,
        title: data.name
    };
    if (data.icon_url && data.icon_url.startsWith('http')) {
        markerOptions.icon = { url: data.icon_url, scaledSize: new google.maps.Size(32, 32) };
    }
    let marker = new google.maps.Marker(markerOptions);
    marker.category = data.category;
    marker.category2 = data.category2;
    marker.category3 = data.category3;
    markers.push(marker);
    let infowindowContent = `
    <div style="width:250px;word-wrap:break-word;">
        <div style="font-size:16px;font-weight:bold;margin-bottom:8px;">${data.popup_header}</div>
        <img src="${data.popupimage_url}" style="width:100%;height:auto;margin-bottom:8px;">
        <div>${data.description}</div>
        <a href="#" onclick="onGetDirectionsClick({lat:${data.lat},lng:${data.lng}},'${data.popup_header}')">Get Directions</a>
    </div>`;
    let infowindow = new google.maps.InfoWindow({ content: infowindowContent });
    marker.addListener('click', () => {
        if (currentInfowindow) currentInfowindow.close();
        currentInfowindow = infowindow;
        infowindow.open(map, marker);
    });
}

function calculateAndDisplayRoute() {
    let start = document.getElementById('startLocation').value;
    let end = document.getElementById('endLocation').value;
    let travelMode = document.getElementById('travelMode').value;
    if (!start || !end) {
        alert('Please enter both start and end locations.');
        return;
    }
    directionsService.route({
        origin: start,
        destination: end,
        travelMode: travelMode
    }, function (response, status) {
        if (status === 'OK') {
            directionsRenderer.setDirections(response);
            displayRouteDetails(response);
            if (currentInfowindow) currentInfowindow.close();
        } else {
            window.alert('Directions request failed due to ' + status);
        }
    });
}

function displayRouteDetails(response) {
    const route = response.routes[0];
    let duration = route.legs[0].duration.text;
    let distance = route.legs[0].distance.text;
    document.getElementById('routeDetails').innerHTML = `Distance: ${distance}, Duration: ${duration}`;
}

function onGetDirectionsClick(endLocation, endLocationName) {
    document.getElementById('endLocation').value = `${endLocation.lat}, ${endLocation.lng}`;
    document.getElementById('endLocationName').textContent = endLocationName;
    document.getElementById('directionsPanel').style.display = 'block';
}

function copyAddress() {
    let endLocation = document.getElementById('endLocation').value;
    navigator.clipboard.writeText(endLocation).then(() => {
        alert('Address copied to clipboard!');
    }).catch(err => {
        alert('Error in copying text: ', err);
    });
}

function applyFilters() {
    markers.forEach(marker => {
        let isVisible = false;
        if (activeFilters.complex.length > 0) {
            isVisible = activeFilters.complex.some(value => marker.category && marker.category.split(',').includes(value)) && (activeFilters.category2.length === 0 || activeFilters.category2.includes(marker.category2));
        }
        if (!isVisible) {
            for (let type in activeFilters) {
                if (type !== 'complex' && activeFilters[type].length > 0) {
                    isVisible = activeFilters[type].some(value => marker[type] && marker[type].split(',').includes(value));
                    if (isVisible) break;
                }
            }
        }
        marker.setMap(isVisible ? map : null);
    });
}


function loadGoogleMapsScript() {
    const script = document.createElement('script');
    script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCAK_oC-2iPESygmTO20tMTBJ5Eyu5_3Rw&libraries=places&callback=initMap';
    script.async = true;
    script.defer = true;
    script.onload = initKMLLayers;
    document.head.appendChild(script);
}

loadGoogleMapsScript();
</script>
</body>
</html>
